import React, { useState } from "react";
import { Button, message, notification } from "antd";
import { ReloadOutlined } from "@ant-design/icons";
import { updateProducts } from "@/lib/api";

interface UpdateButtonProps {
  onUpdateSuccess?: () => void;
}

export const UpdateButton: React.FC<UpdateButtonProps> = ({
  onUpdateSuccess,
}) => {
  const [isUpdating, setIsUpdating] = useState(false);
  const [api, contextHolder] = notification.useNotification();

  const handleUpdate = async () => {
    console.log("üîÑ Starting update...");
    setIsUpdating(true);
    try {
      console.log("üì° Calling updateProducts...");
      const result = await updateProducts();
      console.log("‚úÖ Update successful, showing toast...");
      
      // S·ª≠ d·ª•ng message t·ª´ HTTP response
      const responseMessage = result.message || "C·∫≠p nh·∫≠t th√†nh c√¥ng!";
      message.success(`‚úÖ ${responseMessage}`);
      
      // S·ª≠ d·ª•ng notification hook v·ªõi response message
      api.success({
        message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!",
        description: responseMessage,
        duration: 3,
        placement: "topRight",
      });

      // Kh√¥ng g·ªçi onUpdateSuccess ƒë·ªÉ tr√°nh refresh data
      // if (onUpdateSuccess) {
      //   onUpdateSuccess();
      // }
    } catch (error) {
      console.error("‚ùå Update error:", error);
      message.error("‚ùå C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m");

      // S·ª≠ d·ª•ng notification hook
      api.error({
        message: "C·∫≠p nh·∫≠t th·∫•t b·∫°i!",
        description: "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i.",
        duration: 4,
        placement: "topRight",
      });
    } finally {
      setIsUpdating(false);
    }
  };

  return (
    <>
      {contextHolder}
      <Button
        type="primary"
        icon={<ReloadOutlined />}
        loading={isUpdating}
        onClick={handleUpdate}
        style={{
          backgroundColor: "#52c41a",
          borderColor: "#52c41a",
        }}
        onMouseEnter={(e) => {
          e.currentTarget.style.backgroundColor = "#73d13d";
          e.currentTarget.style.borderColor = "#73d13d";
        }}
        onMouseLeave={(e) => {
          e.currentTarget.style.backgroundColor = "#52c41a";
          e.currentTarget.style.borderColor = "#52c41a";
        }}
      >
        C·∫≠p nh·∫≠t
      </Button>
    </>
  );
};
