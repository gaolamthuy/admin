/**
 * API Service Layer
 * Main API layer - x·ª≠ l√Ω t·∫•t c·∫£ c√°c API calls v√† error handling
 * S·ª≠ d·ª•ng database.ts cho c√°c thao t√°c database
 */

import { ApiResponse, Product } from "@/types/api";
import { validateApiResponse } from "./schemas";
import {
  fetchProductsFromSupabase,
  toggleProductFavorite as toggleProductFavoriteFromSupabase,
  SupabaseApiError,
} from "./database";

export class ApiError extends Error {
  constructor(
    message: string,
    public statusCode: number = 500,
    public code: string = "API_ERROR"
  ) {
    super(message);
    this.name = "ApiError";
  }
}

/**
 * Fetch d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ Supabase
 * Thay th·∫ø cho API CDN c≈©
 */
export async function fetchProductsData(): Promise<ApiResponse> {
  try {
    // S·ª≠ d·ª•ng Supabase thay v√¨ API CDN
    const data = await fetchProductsFromSupabase();

    // Validate d·ªØ li·ªáu tr·∫£ v·ªÅ
    return validateApiResponse(data);
  } catch (error) {
    if (error instanceof SupabaseApiError) {
      // Chuy·ªÉn ƒë·ªïi SupabaseApiError th√†nh ApiError ƒë·ªÉ t∆∞∆°ng th√≠ch
      throw new ApiError(error.message, error.statusCode, error.code);
    }

    throw new ApiError(
      `L·ªói khi l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m: ${
        error instanceof Error ? error.message : "Unknown error"
      }`,
      500,
      "SUPABASE_ERROR"
    );
  }
}

/**
 * T·∫°o URL ƒë·ªÉ in tem s·∫£n ph·∫©m
 * @param code - M√£ s·∫£n ph·∫©m
 * @param quantity - S·ªë l∆∞·ª£ng in
 * @returns string - URL ƒë·ªÉ in tem v·ªõi ƒë·∫ßy ƒë·ªß tham s·ªë
 */
export function createPrintLabelUrl(code: string, quantity: number): string {
  const webhookUrl = process.env.NEXT_PUBLIC_WEBHOOK_URL + "/print";

  if (!webhookUrl) {
    throw new ApiError(
      "Webhook URL kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh",
      500,
      "MISSING_WEBHOOK_CONFIG"
    );
  }

  return `${webhookUrl}?printType=label&code=${encodeURIComponent(
    code
  )}&quantity=${quantity}`;
}

/**
 * Toggle tr·∫°ng th√°i favorite c·ªßa s·∫£n ph·∫©m
 * @param productId - ID c·ªßa s·∫£n ph·∫©m (kiotviet_id)
 * @returns Promise<boolean> - Tr·∫°ng th√°i favorite m·ªõi
 */
export async function toggleProductFavorite(
  productId: string | number
): Promise<boolean> {
  try {
    return await toggleProductFavoriteFromSupabase(productId);
  } catch (error) {
    if (error instanceof SupabaseApiError) {
      throw new ApiError(error.message, error.statusCode, error.code);
    }

    throw new ApiError(
      `L·ªói khi toggle favorite: ${
        error instanceof Error ? error.message : "Unknown error"
      }`,
      500,
      "SUPABASE_ERROR"
    );
  }
}

/**
 * C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m t·ª´ webhook
 * @returns Promise<boolean> - Th√†nh c√¥ng hay kh√¥ng
 */
export async function updateProducts(): Promise<boolean> {
  try {
    console.log("üîß updateProducts called");
    const webhookUrl = process.env.NEXT_PUBLIC_WEBHOOK_URL;
    const basicAuth = process.env.NEXT_PUBLIC_WEBHOOK_BASIC_AUTH;

    console.log("üåê Webhook URL:", webhookUrl);
    console.log("üîê Basic Auth configured:", !!basicAuth);

    if (!webhookUrl) {
      throw new ApiError(
        "Webhook URL kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh",
        500,
        "MISSING_WEBHOOK_CONFIG"
      );
    }

    if (!basicAuth) {
      throw new ApiError(
        "Basic Auth kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh",
        500,
        "MISSING_BASIC_AUTH_CONFIG"
      );
    }

    // Encode basic auth
    const encodedAuth = btoa(basicAuth);
    const fullUrl = webhookUrl + "/sync-kiotviet-data";
    
    console.log("üì° Making request to:", fullUrl);
    console.log("üì¶ Request body:", { type: "products" });

    const response = await fetch(fullUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Basic ${encodedAuth}`,
      },
      body: JSON.stringify({
        type: "products",
      }),
    });

    console.log("üìä Response status:", response.status);
    console.log("üìä Response ok:", response.ok);

    if (!response.ok) {
      throw new ApiError(
        `Webhook request failed: ${response.status} ${response.statusText}`,
        response.status,
        "WEBHOOK_ERROR"
      );
    }

    console.log("‚úÖ Update successful!");
    return true;
  } catch (error) {
    console.error("‚ùå Update error:", error);
    if (error instanceof ApiError) {
      throw error;
    }

    throw new ApiError(
      `L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m: ${
        error instanceof Error ? error.message : "Unknown error"
      }`,
      500,
      "UPDATE_ERROR"
    );
  }
}
